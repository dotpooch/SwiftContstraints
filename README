Bind is a chainable wrapper for the NSLayoutConstraints.
You can use this class to constraints in a more readable manner.

Environment: Swift 2 -- Cocoa and iOS

About Layout Constraints:
1. Constraints always need to override the autoresizing mask, so make sure:
translatesautoresizingmaskintoconstraints = false

2. Every constraint is injected into the containing view or itself.
3. Every constraint has a restricted view and an authority view.  These can be the same, if, for instance, you want the a square and the height should equal the width.

How to use Bind:
there are essentially 4 steps:
1. Create an instance
2. choose a constraint
3. make any alterations
4. apply constraint


1. create an instance of Bind:

a.
let aView = UIView()
Bind(restrict:aView) 

What is happening:
Behind the scene, the authority and the parent are being set to aView 


b.
let parentView = UIView()
let aView = UIView()
Bind(restrict:aView, authority: parentView)

What is happening:
Behind the scene, the parent is also being set to parentView 

c.
let parentView = UIView()
let siblingView = UIView()
let aView = UIView()
Bind(restrict:aView, authority: siblingView, parent: parentView) 


2. choose constraint:
All methods return the instance you are working on so, methods are chainable.

The methods below all make the attribute of the restricted view equal the attribute of the authority view and return the instance:
.leadings -> self 
.tops -> self 
.trailings -> self
.bottoms -> self
.centerXs -> self
.centerYs -> self
.widths -> self
.heights -> self

.complex(restricted:, authority:, view feature)
-- this allows for more complicated relationships, such putting a view to the right of a sibling

.alignRight
.alignLeft
.alignAbove
.alignBelow
-- these are wrapper function for complex above

.alignAll
-- make the restricted view equal the parent view



3. make any alterations:
.staticOffset(a number) -> self
-- take the last constraint and adjust it by a fixed number

.relativeOffset(a number) -> self
-- take the last constraint and adjust it by a percentage of the authority


4. apply constraints
One on these MUST be added after the last constraint in your instance or it (only the last) will not be run.
There are 3 ways to do this: .__, .done, .apply.  They all do the same thing, I prefer .__ for asthetic reasons.



Example Usage:

This is a particularly complicated set or constraints written in a controller.

    Bind(restrict: buttonFrame, authority: nameTextField, parent: self.view)
      .alignLeft
      .__
    
    Bind(restrict: buttonFrame, authority: self.view)
      .leadings
      .tops
      .__
    
    Bind(restrict: buttonFrame)
      .complex(restricted: .Width, authority: .Height)
      .__

    Bind(restrict: nameTextField, authority: self.view)
      .widths.relativeOffset(0.55)
      .trailings.staticOffset(-10)
      .tops
      .__
    
    Bind(restrict: roleTextField, authority: nameTextField, parent: self.view)
      .heights
      .widths
      .trailings
      .alignBelow
      .__

    Bind(restrict: profileButton, authority: buttonFrame, parent: self.view)
      .alignBelow
      .__

    Bind(restrict: profileButton, authority: self.view)
      .bottoms
      .leadings
      .complex(restricted:.Trailing, authority:.CenterX).staticOffset(-1)
      .__
    
    Bind(restrict: line, authority: self.view)
      .width(1)
      .centerXs
      .bottoms
      .__

    Bind(restrict: logoutButton, authority: self.view)
      .complex(restricted:.Leading, authority:.CenterX).staticOffset(1)
      .trailings
      .bottoms
      .__














